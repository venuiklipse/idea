package za.co.idea.ip.jaxws.document;

import java.net.MalformedURLException;
import java.net.URL;

import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;
import javax.xml.ws.soap.MTOM;

/**
 * This class was generated by Apache CXF 2.7.10 2014-05-31T23:19:46.195+02:00
 * Generated source version: 2.7.10
 * 
 */
@WebServiceClient(name = "documentService", targetNamespace = "http://za.co.idea/document/")
@MTOM(enabled = true)
public class DocumentService extends Service {

	public final static URL WSDL_LOCATION;

	public final static QName SERVICE = new QName("http://za.co.idea/document/", "documentService");
	public final static QName DocumentSOAP = new QName("http://za.co.idea/document/", "documentSOAP");
	static {
		URL url = null;
		try {
			url = new URL("http://localhost:38080/ip-jaxws/documentService?wsdl");
		} catch (MalformedURLException e) {
			java.util.logging.Logger.getLogger(DocumentService.class.getName()).log(java.util.logging.Level.INFO, "Can not initialize the default wsdl from {0}", "file:/noformat/ws/lide/lfaces/sample/src/document.wsdl");
		}
		WSDL_LOCATION = url;
	}

	public DocumentService(URL wsdlLocation) {
		super(wsdlLocation, SERVICE);
	}

	public DocumentService(URL wsdlLocation, QName serviceName) {
		super(wsdlLocation, serviceName);
	}

	public DocumentService() {
		super(WSDL_LOCATION, SERVICE);
	}

	// This constructor requires JAX-WS API 2.2. You will need to endorse the
	// 2.2
	// API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS
	// 2.1
	// compliant code instead.
	public DocumentService(WebServiceFeature... features) {
		super(WSDL_LOCATION, SERVICE, features);
	}

	// This constructor requires JAX-WS API 2.2. You will need to endorse the
	// 2.2
	// API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS
	// 2.1
	// compliant code instead.
	public DocumentService(URL wsdlLocation, WebServiceFeature... features) {
		super(wsdlLocation, SERVICE, features);
	}

	// This constructor requires JAX-WS API 2.2. You will need to endorse the
	// 2.2
	// API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS
	// 2.1
	// compliant code instead.
	public DocumentService(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
		super(wsdlLocation, serviceName, features);
	}

	/**
	 * 
	 * @return returns DocumentPort
	 */
	@WebEndpoint(name = "documentSOAP")
	public DocumentPort getDocumentSOAP() {
		return super.getPort(DocumentSOAP, DocumentPort.class);
	}

	/**
	 * 
	 * @param features
	 *            A list of {@link javax.xml.ws.WebServiceFeature} to configure
	 *            on the proxy. Supported features not in the
	 *            <code>features</code> parameter will have their default
	 *            values.
	 * @return returns DocumentPort
	 */
	@WebEndpoint(name = "documentSOAP")
	public DocumentPort getDocumentSOAP(WebServiceFeature... features) {
		return super.getPort(DocumentSOAP, DocumentPort.class, features);
	}

}
