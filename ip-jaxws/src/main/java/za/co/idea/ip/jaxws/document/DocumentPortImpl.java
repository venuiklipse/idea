/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package za.co.idea.ip.jaxws.document;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.ResourceBundle;
import java.util.UUID;

import za.co.idea.ip.orm.bean.IpBlob;
import za.co.idea.ip.orm.dao.IpBlobDAO;
import za.co.idea.ip.orm.dao.IpNativeSQLDAO;

/**
 * This class was generated by Apache CXF 2.7.10 2014-05-31T23:19:46.137+02:00
 * Generated source version: 2.7.10
 * 
 */

@javax.jws.WebService(serviceName = "documentService", portName = "documentSOAP", targetNamespace = "http://za.co.idea/document/", endpointInterface = "za.co.idea.ip.jaxws.document.DocumentPort")
public class DocumentPortImpl implements DocumentPort {

	private IpBlobDAO ipBlobDAO;
	private IpNativeSQLDAO ipNativeSQLDAO;
	private static final ResourceBundle BUNDLE = ResourceBundle.getBundle("ip-jaxws");

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * za.co.idea.ip.jaxws.document.DocumentPort#uploadDocument(za.co.idea.ip
	 * .jaxws.document.UploadDocumentRq param )*
	 */
	public za.co.idea.ip.jaxws.document.UploadDocumentRs uploadDocument(UploadDocumentRq param) {
		za.co.idea.ip.jaxws.document.UploadDocumentRs _return = new za.co.idea.ip.jaxws.document.UploadDocumentRs();
		za.co.idea.ip.jaxws.document.Response _returnResponse = new za.co.idea.ip.jaxws.document.Response();
		try {
			File file = new File(BUNDLE.getString("base.dir") + File.separator + UUID.randomUUID().toString());
			if (file.exists())
				file.delete();
			file.createNewFile();
			FileOutputStream data = new FileOutputStream(file);
			data.write(param.getDocument().getFileContent());
			data.flush();
			data.close();
			Long id = ipBlobDAO.getBlobIdByEntity(Long.parseLong(param.getDocument().getEntityId()), param.getDocument().getEntityTableName());
			IpBlob blob = new IpBlob();
			blob.setBlobContent(file.getAbsolutePath());
			blob.setBlobContentType(param.getDocument().getContentType());
			blob.setBlobEntityId(Long.valueOf(param.getDocument().getEntityId()));
			blob.setBlobEntityTblNm(param.getDocument().getEntityTableName());
			blob.setBlobName(param.getDocument().getFileName());
			if (id != -999) {
				blob.setBlobId(id);
				ipBlobDAO.attachDirty(blob);
			} else {
				blob.setBlobId(ipNativeSQLDAO.getNextId(IpBlob.class));
				ipBlobDAO.save(blob);
			}
			_returnResponse.setRespCode("0");
			_returnResponse.setRespDesc("Success");
			_return.setResponse(_returnResponse);
			return _return;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			_returnResponse.setRespCode("1");
			_returnResponse.setRespDesc(ex.getMessage());
			_return.setResponse(_returnResponse);
			return _return;
		}
	}

	public za.co.idea.ip.jaxws.document.DownloadDocumentRs downloadDocument(DownloadDocumentRq param) {
		za.co.idea.ip.jaxws.document.DownloadDocumentRs _return = new za.co.idea.ip.jaxws.document.DownloadDocumentRs();
		za.co.idea.ip.jaxws.document.Response _returnResponse = new za.co.idea.ip.jaxws.document.Response();
		try {
			IpBlob ipBlob = ipBlobDAO.getBlobByEntity(Long.valueOf(param.getEntityId()), param.getEntityTableName());
			if (ipBlob != null && ipBlob.getBlobContent() != null) {
				_return.setContentType(ipBlob.getBlobContentType());
				_return.setFileName(ipBlob.getBlobName());
				File file = new File(ipBlob.getBlobContent());
				FileInputStream reader = new FileInputStream(file);
				byte[] b = new byte[(int) file.length()];
				reader.read(b);
				reader.close();
				_return.setFileContent(b);
				_returnResponse.setRespCode("0");
				_returnResponse.setRespDesc("Success");
				_return.setResponse(_returnResponse);
			} else {
				_returnResponse.setRespCode("2");
				_returnResponse.setRespDesc("No Documents Found");
				_return.setResponse(_returnResponse);
			}
			return _return;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			_returnResponse.setRespCode("1");
			_returnResponse.setRespDesc(ex.getMessage());
			_return.setResponse(_returnResponse);
			return _return;
		}
	}

	public za.co.idea.ip.jaxws.document.ListDocumentRs listDocument(ListDocumentRq param) {
		za.co.idea.ip.jaxws.document.ListDocumentRs _return = new za.co.idea.ip.jaxws.document.ListDocumentRs();
		za.co.idea.ip.jaxws.document.Response _returnResponse = new za.co.idea.ip.jaxws.document.Response();
		try {
			za.co.idea.ip.jaxws.document.Documents _returnDocuments = new za.co.idea.ip.jaxws.document.Documents();
			java.util.List<za.co.idea.ip.jaxws.document.Document> _returnDocumentsDocument = new java.util.ArrayList<za.co.idea.ip.jaxws.document.Document>();
			za.co.idea.ip.jaxws.document.Document _returnDocumentsDocumentVal1 = new za.co.idea.ip.jaxws.document.Document();
			_returnDocumentsDocumentVal1.setEntityId("EntityId2086679299");
			_returnDocumentsDocumentVal1.setEntityTableName("EntityTableName2109915234");
			_returnDocumentsDocumentVal1.setFileName("FileName1310529823");
			_returnDocumentsDocumentVal1.setContentType("ContentType930624867");
			_returnDocumentsDocument.add(_returnDocumentsDocumentVal1);
			_returnDocuments.getDocument().addAll(_returnDocumentsDocument);
			_return.setDocuments(_returnDocuments);
			_returnResponse.setRespCode("0");
			_returnResponse.setRespDesc("Success");
			_return.setResponse(_returnResponse);
			return _return;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			_returnResponse.setRespCode("1");
			_returnResponse.setRespDesc(ex.getMessage());
			_return.setResponse(_returnResponse);
			return _return;
		}
	}

	public IpBlobDAO getIpBlobDAO() {
		return ipBlobDAO;
	}

	public void setIpBlobDAO(IpBlobDAO ipBlobDAO) {
		this.ipBlobDAO = ipBlobDAO;
	}

	public IpNativeSQLDAO getIpNativeSQLDAO() {
		return ipNativeSQLDAO;
	}

	public void setIpNativeSQLDAO(IpNativeSQLDAO ipNativeSQLDAO) {
		this.ipNativeSQLDAO = ipNativeSQLDAO;
	}

}